// Generated by Dagger (https://dagger.dev).
package com.example.photogalleryapp.di;

import com.example.photogalleryapp.domain.repository.PhotoRepository;
import com.example.photogalleryapp.domain.usecase.GetPhotosUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class UseCaseModule_ProvideGetPhotosUseCaseFactory implements Factory<GetPhotosUseCase> {
  private final Provider<PhotoRepository> photoRepositoryProvider;

  public UseCaseModule_ProvideGetPhotosUseCaseFactory(
      Provider<PhotoRepository> photoRepositoryProvider) {
    this.photoRepositoryProvider = photoRepositoryProvider;
  }

  @Override
  public GetPhotosUseCase get() {
    return provideGetPhotosUseCase(photoRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideGetPhotosUseCaseFactory create(
      Provider<PhotoRepository> photoRepositoryProvider) {
    return new UseCaseModule_ProvideGetPhotosUseCaseFactory(photoRepositoryProvider);
  }

  public static GetPhotosUseCase provideGetPhotosUseCase(PhotoRepository photoRepository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideGetPhotosUseCase(photoRepository));
  }
}
